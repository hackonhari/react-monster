{"map":"{\"version\":3,\"sources\":[\"D:\\\\myprojects\\\\reactjs-ZTM\\\\monster-app\\\\src\\\\components\\\\card\\\\card.component.jsx\",\"D:\\\\myprojects\\\\reactjs-ZTM\\\\monster-app\\\\src\\\\components\\\\card-list\\\\card-list.component.jsx\",\"D:\\\\myprojects\\\\reactjs-ZTM\\\\monster-app\\\\src\\\\components\\\\search-box\\\\search.component.jsx\",\"D:\\\\myprojects\\\\reactjs-ZTM\\\\monster-app\\\\src\\\\App.js\",\"D:\\\\myprojects\\\\reactjs-ZTM\\\\monster-app\\\\src\\\\serviceWorker.js\",\"D:\\\\myprojects\\\\reactjs-ZTM\\\\monster-app\\\\src\\\\index.js\"],\"names\":[\"Card\",\"_ref\",\"monster\",\"react_default\",\"a\",\"createElement\",\"className\",\"alt\",\"src\",\"concat\",\"id\",\"name\",\"email\",\"CardList\",\"this\",\"props\",\"monsters\",\"map\",\"card_component_Card\",\"key\",\"React\",\"Component\",\"SearchBox\",\"placeholder\",\"handleChange\",\"type\",\"onChange\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"e\",\"setState\",\"searchField\",\"target\",\"value\",\"state\",\"_this2\",\"fetch\",\"then\",\"response\",\"json\",\"users\",\"_this$state\",\"filteredMonsters\",\"filter\",\"toLowerCase\",\"includes\",\"search_component_SearchBox\",\"card_list_component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\",\"catch\",\"error\",\"console\",\"message\"],\"mappings\":\"mTAIaA,qBAAK,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,QAAF,OAEVC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAI,UAAUC,IAAG,wBAAAC,OAA0BP,EAAQQ,GAAlC,4BACtBP,EAAAC,EAAAC,cAAA,KAAA,KAAKH,EAAQS,MACbR,EAAAC,EAAAC,cAAA,IAAA,KAAIH,EAAQU,UCQTC,mLAVR,OAAQV,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,aAElBQ,KAAKC,MAAMC,SAASC,IAAI,SAAAf,GAAO,OAC3BC,EAAAC,EAAAC,cAACa,EAAD,CAAMC,IAAKjB,EAAQQ,GAAIR,QAASA,cALzBkB,EAAAA,EAAMC,WCDhBC,SAAU,SAAArB,GAAA,IAAEsB,EAAFtB,EAAEsB,YAAYC,EAAdvB,EAAcuB,aAAd,OACnBrB,EAAAC,EAAAC,cAAA,QAAA,CAAOC,UAAU,SAASmB,KAAK,SAC/BF,YAAaA,EACbG,SAAUF,MCkCCG,cAlCb,SAAAA,EAAYZ,GAAM,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAf,KAAAa,IAChBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAf,KAAAe,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAnB,KAAMC,KAORS,aAAa,SAACU,GACZN,EAAKO,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAPpCV,EAAKW,MAAM,CACTvB,SAAS,GACToB,YAAY,IAJER,mFAYC,IAAAY,EAAA1B,KACjB2B,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAEA,EAASC,SACxBF,KAAK,SAAAG,GACJL,EAAKL,SAAS,CAACnB,SAAS6B,uCAGpB,IAAAC,EACuBhC,KAAKyB,MAA3BvB,EADD8B,EACC9B,SAASoB,EADVU,EACUV,YACVW,EAAiB/B,EAASgC,OAAO,SAAA9C,GAAO,OAC5CA,EAAQS,KAAKsC,cAAcC,SAASd,EAAYa,iBAElD,OACI9C,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,KAAA,KAAA,qBACAF,EAAAC,EAAAC,cAAC8C,EAAD,CAAW5B,YAAY,kBAAkBC,aAAcV,KAAKU,eAC5DrB,EAAAC,EAAAC,cAAC+C,EAAD,CAAUpC,SAAU+B,YA9BV1B,EAAAA,WCOEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OACLxD,EAAAC,EAAAC,cAACuD,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,KAAK,SAAAwB,GACJA,EAAaC,eAEdC,MAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME\",\"sourcesContent\":[\"import React from 'react';\\r\\nimport './card.styles.css';\\r\\n\\r\\n\\r\\nexport const Card=({monster})=>(\\r\\n\\r\\n        <div className='card-container'>\\r\\n            <img alt=\\\"monster\\\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}/>\\r\\n            <h2>{monster.name}</h2> \\r\\n            <p>{monster.email}</p>       \\r\\n        </div>\\r\\n);\",\"import React from 'react';\\r\\nimport './card-list.styles.css';\\r\\nimport {Card} from '../card/card.component';\\r\\n\\r\\n\\r\\nclass CardList extends React.Component{\\r\\n  render(){\\r\\n       return( <div className=\\\"card-list\\\">\\r\\n        {\\r\\n            this.props.monsters.map(monster=>(\\r\\n                <Card key={monster.id} monster={monster} />\\r\\n            ))\\r\\n          }   \\r\\n        </div>\\r\\n         )};\\r\\n}\\r\\n\\r\\nexport default CardList;\",\"import React from 'react';\\r\\nimport './search.styles.css';\\r\\n\\r\\n\\r\\nexport const SearchBox=({placeholder,handleChange})=>(\\r\\n    <input className=\\\"search\\\" type=\\\"search\\\"\\r\\n    placeholder={placeholder}\\r\\n    onChange={handleChange}\\r\\n    />\\r\\n)\",\"import React, {Component}  from 'react';\\r\\nimport './App.css';\\r\\nimport CardList from './components/card-list/card-list.component.jsx';\\r\\nimport {SearchBox} from './components/search-box/search.component.jsx';\\r\\n\\r\\nclass App extends Component{\\r\\n\\r\\n  constructor(props){\\r\\n    super(props);\\r\\n    this.state={\\r\\n      monsters:[],\\r\\n      searchField:\\\"\\\"\\r\\n    }\\r\\n  };\\r\\n\\r\\n  handleChange=(e)=>{\\r\\n    this.setState({searchField:e.target.value}); //this refers to the App component, because it owns the method in arrow functions.\\r\\n  }\\r\\n\\r\\n  componentDidMount(){\\r\\n    fetch('https://jsonplaceholder.typicode.com/users')\\r\\n    .then(response=>response.json())\\r\\n    .then(users=>{\\r\\n      this.setState({monsters:users});\\r\\n    })\\r\\n  }\\r\\n  render(){\\r\\n    const {monsters,searchField}=this.state;\\r\\n    const filteredMonsters=monsters.filter(monster=>(\\r\\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\\r\\n    ))\\r\\n    return (\\r\\n        <div className=\\\"App\\\">\\r\\n        <h1>Monsters RolodeXx</h1>\\r\\n        <SearchBox placeholder='search monsters' handleChange={this.handleChange} />\\r\\n        <CardList monsters={filteredMonsters}>\\r\\n        </CardList> \\r\\n        </div>\\r\\n    );\\r\\n  }\\r\\n}\\r\\nexport default App;\\r\\n\",\"// This optional code is used to register a service worker.\\r\\n// register() is not called by default.\\r\\n\\r\\n// This lets the app load faster on subsequent visits in production, and gives\\r\\n// it offline capabilities. However, it also means that developers (and users)\\r\\n// will only see deployed updates on subsequent visits to a page, after all the\\r\\n// existing tabs open on the page have been closed, since previously cached\\r\\n// resources are updated in the background.\\r\\n\\r\\n// To learn more about the benefits of this model and instructions on how to\\r\\n// opt-in, read https://bit.ly/CRA-PWA\\r\\n\\r\\nconst isLocalhost = Boolean(\\r\\n  window.location.hostname === 'localhost' ||\\r\\n    // [::1] is the IPv6 localhost address.\\r\\n    window.location.hostname === '[::1]' ||\\r\\n    // 127.0.0.0/8 are considered localhost for IPv4.\\r\\n    window.location.hostname.match(\\r\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\r\\n    )\\r\\n);\\r\\n\\r\\nexport function register(config) {\\r\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\r\\n    // The URL constructor is available in all browsers that support SW.\\r\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\r\\n    if (publicUrl.origin !== window.location.origin) {\\r\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\r\\n      // from what our page is served on. This might happen if a CDN is used to\\r\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\r\\n      return;\\r\\n    }\\r\\n\\r\\n    window.addEventListener('load', () => {\\r\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\r\\n\\r\\n      if (isLocalhost) {\\r\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\r\\n        checkValidServiceWorker(swUrl, config);\\r\\n\\r\\n        // Add some additional logging to localhost, pointing developers to the\\r\\n        // service worker/PWA documentation.\\r\\n        navigator.serviceWorker.ready.then(() => {\\r\\n          console.log(\\r\\n            'This web app is being served cache-first by a service ' +\\r\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\r\\n          );\\r\\n        });\\r\\n      } else {\\r\\n        // Is not localhost. Just register service worker\\r\\n        registerValidSW(swUrl, config);\\r\\n      }\\r\\n    });\\r\\n  }\\r\\n}\\r\\n\\r\\nfunction registerValidSW(swUrl, config) {\\r\\n  navigator.serviceWorker\\r\\n    .register(swUrl)\\r\\n    .then(registration => {\\r\\n      registration.onupdatefound = () => {\\r\\n        const installingWorker = registration.installing;\\r\\n        if (installingWorker == null) {\\r\\n          return;\\r\\n        }\\r\\n        installingWorker.onstatechange = () => {\\r\\n          if (installingWorker.state === 'installed') {\\r\\n            if (navigator.serviceWorker.controller) {\\r\\n              // At this point, the updated precached content has been fetched,\\r\\n              // but the previous service worker will still serve the older\\r\\n              // content until all client tabs are closed.\\r\\n              console.log(\\r\\n                'New content is available and will be used when all ' +\\r\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\r\\n              );\\r\\n\\r\\n              // Execute callback\\r\\n              if (config && config.onUpdate) {\\r\\n                config.onUpdate(registration);\\r\\n              }\\r\\n            } else {\\r\\n              // At this point, everything has been precached.\\r\\n              // It's the perfect time to display a\\r\\n              // \\\"Content is cached for offline use.\\\" message.\\r\\n              console.log('Content is cached for offline use.');\\r\\n\\r\\n              // Execute callback\\r\\n              if (config && config.onSuccess) {\\r\\n                config.onSuccess(registration);\\r\\n              }\\r\\n            }\\r\\n          }\\r\\n        };\\r\\n      };\\r\\n    })\\r\\n    .catch(error => {\\r\\n      console.error('Error during service worker registration:', error);\\r\\n    });\\r\\n}\\r\\n\\r\\nfunction checkValidServiceWorker(swUrl, config) {\\r\\n  // Check if the service worker can be found. If it can't reload the page.\\r\\n  fetch(swUrl, {\\r\\n    headers: { 'Service-Worker': 'script' },\\r\\n  })\\r\\n    .then(response => {\\r\\n      // Ensure service worker exists, and that we really are getting a JS file.\\r\\n      const contentType = response.headers.get('content-type');\\r\\n      if (\\r\\n        response.status === 404 ||\\r\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\r\\n      ) {\\r\\n        // No service worker found. Probably a different app. Reload the page.\\r\\n        navigator.serviceWorker.ready.then(registration => {\\r\\n          registration.unregister().then(() => {\\r\\n            window.location.reload();\\r\\n          });\\r\\n        });\\r\\n      } else {\\r\\n        // Service worker found. Proceed as normal.\\r\\n        registerValidSW(swUrl, config);\\r\\n      }\\r\\n    })\\r\\n    .catch(() => {\\r\\n      console.log(\\r\\n        'No internet connection found. App is running in offline mode.'\\r\\n      );\\r\\n    });\\r\\n}\\r\\n\\r\\nexport function unregister() {\\r\\n  if ('serviceWorker' in navigator) {\\r\\n    navigator.serviceWorker.ready\\r\\n      .then(registration => {\\r\\n        registration.unregister();\\r\\n      })\\r\\n      .catch(error => {\\r\\n        console.error(error.message);\\r\\n      });\\r\\n  }\\r\\n}\\r\\n\",\"import React from 'react';\\r\\nimport ReactDOM from 'react-dom';\\r\\nimport './index.css';\\r\\nimport App from './App';\\r\\nimport * as serviceWorker from './serviceWorker';\\r\\n\\r\\nReactDOM.render(\\r\\n    <App />,\\r\\n  document.getElementById('root')\\r\\n);\\r\\n\\r\\n// If you want your app to work offline and load faster, you can change\\r\\n// unregister() to register() below. Note this comes with some pitfalls.\\r\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\r\\nserviceWorker.unregister();\\r\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,,,function(e,t,n){e.exports=n(18)},,,,,function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){\"use strict\";n.r(t);var a=n(0),r=n.n(a),o=n(7),c=n.n(o),s=(n(13),n(1)),i=n(2),l=n(4),u=n(3),h=n(5),m=(n(14),n(15),n(16),function(e){var t=e.monster;return r.a.createElement(\"div\",{className:\"card-container\"},r.a.createElement(\"img\",{alt:\"monster\",src:\"https://robohash.org/\".concat(t.id,\"?set=set2&size=180x180\")}),r.a.createElement(\"h2\",null,t.name),r.a.createElement(\"p\",null,t.email))}),d=function(e){function t(){return Object(s.a)(this,t),Object(l.a)(this,Object(u.a)(t).apply(this,arguments))}return Object(h.a)(t,e),Object(i.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"div\",{className:\"card-list\"},this.props.monsters.map(function(e){return r.a.createElement(m,{key:e.id,monster:e})}))}}]),t}(r.a.Component),p=(n(17),function(e){var t=e.placeholder,n=e.handleChange;return r.a.createElement(\"input\",{className:\"search\",type:\"search\",placeholder:t,onChange:n})}),f=function(e){function t(e){var n;return Object(s.a)(this,t),(n=Object(l.a)(this,Object(u.a)(t).call(this,e))).handleChange=function(e){n.setState({searchField:e.target.value})},n.state={monsters:[],searchField:\"\"},n}return Object(h.a)(t,e),Object(i.a)(t,[{key:\"componentDidMount\",value:function(){var e=this;fetch(\"https://jsonplaceholder.typicode.com/users\").then(function(e){return e.json()}).then(function(t){e.setState({monsters:t})})}},{key:\"render\",value:function(){var e=this.state,t=e.monsters,n=e.searchField,a=t.filter(function(e){return e.name.toLowerCase().includes(n.toLowerCase())});return r.a.createElement(\"div\",{className:\"App\"},r.a.createElement(\"h1\",null,\"Monsters RolodeXx\"),r.a.createElement(p,{placeholder:\"search monsters\",handleChange:this.handleChange}),r.a.createElement(d,{monsters:a}))}}]),t}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(r.a.createElement(f,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()}).catch(function(e){console.error(e.message)})}],[[8,1,2]]]);","extractedComments":[]}